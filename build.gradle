plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.github.node-gradle.node' version '7.0.1'
}

node {
    download = false
    nodeProjectDir = file("${projectDir.parent}/frontend")
}

task installFrontend(type: NpmTask) {
    workingDir = file("${projectDir.parent}/frontend")
    args = ['install']
    inputs.file("${projectDir.parent}/frontend/package.json")
    outputs.dir("${projectDir.parent}/frontend/node_modules")
}

task buildFrontend(type: NpmTask) {
    workingDir = file("${projectDir.parent}/frontend")
    args = ['run', 'build']
    dependsOn installFrontend
    
    inputs.files(fileTree("${projectDir.parent}/frontend/src"))
    inputs.files(fileTree("${projectDir.parent}/frontend/public"))
    inputs.file("${projectDir.parent}/frontend/package.json")
    outputs.dir("${projectDir.parent}/frontend/build")
}

task cleanFrontendDist(type: Delete) {
    delete "${projectDir.parent}/frontend/dist"
}

task copyJarToElectron(type: Copy) {
    from "${buildDir}/libs/backend-0.0.1-SNAPSHOT.jar"
    into "${projectDir.parent}/frontend/build/static"
    dependsOn bootJar
    
    doLast {
        println "Copied JAR to: ${projectDir.parent}/frontend/build/static"
        def jarFile = new File("${projectDir.parent}/frontend/build/static/backend-0.0.1-SNAPSHOT.jar")
        println "JAR exists at destination: ${jarFile.exists()}"
        println "JAR size: ${jarFile.length()} bytes"
    }
}

task buildElectron(type: NpmTask) {
    workingDir = file("${projectDir.parent}/frontend")
    args = ['run', 'electron-pack']
    dependsOn buildFrontend, cleanFrontendDist, copyJarToElectron
    
    doFirst {
        println "Checking JAR before Electron build:"
        def jarFile = new File("${projectDir.parent}/frontend/build/static/backend-0.0.1-SNAPSHOT.jar")
        println "JAR exists: ${jarFile.exists()}"
        if (jarFile.exists()) {
            println "JAR size: ${jarFile.length()} bytes"
        }
    }
}

task buildAll {
    group = 'build'
    description = 'Builds everything including frontend and Electron'
    
    dependsOn clean
    dependsOn bootJar
    dependsOn copyJarToElectron
    dependsOn buildElectron
    
    tasks.named('bootJar') {
        mustRunAfter clean
        dependsOn copyFrontendBuild
    }
    tasks.named('copyJarToElectron') {
        mustRunAfter bootJar
    }
    tasks.named('buildElectron') {
        mustRunAfter copyJarToElectron
    }
}

group = 'com.composeit'
version = '0.0.1-SNAPSHOT'
archivesBaseName = 'backend'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation 'org.hibernate.validator:hibernate-validator:8.0.0.Final'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}